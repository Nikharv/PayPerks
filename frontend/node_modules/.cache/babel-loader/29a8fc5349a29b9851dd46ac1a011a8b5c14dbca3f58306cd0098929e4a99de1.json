{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8080';\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Something went wrong');\n  }\n  return response.json();\n};\nexport const api = {\n  // Auth endpoints\n  login: async (email, password) => {\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    return handleResponse(response);\n  },\n  signup: async userData => {\n    const response = await fetch(`${API_BASE_URL}/auth/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    return handleResponse(response);\n  },\n  // Card endpoints\n  getCards: async (bank, type) => {\n    const params = new URLSearchParams();\n    if (bank) params.append('bank', bank);\n    if (type) params.append('type', type);\n    const response = await fetch(`${API_BASE_URL}/cards-data?${params}`);\n    return handleResponse(response);\n  },\n  addUserCards: async (userId, cardIds) => {\n    const response = await fetch(`${API_BASE_URL}/user-cards`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId,\n        cardIds\n      })\n    });\n    return handleResponse(response);\n  },\n  getUserCards: async userId => {\n    const response = await fetch(`${API_BASE_URL}/user-cards/${userId}`);\n    return handleResponse(response);\n  },\n  // Offer endpoints\n  searchOffers: async (userId, merchant) => {\n    const params = new URLSearchParams({\n      userId\n    });\n    if (merchant) params.append('merchant', merchant);\n    const response = await fetch(`${API_BASE_URL}/offers/search?${params}`);\n    return handleResponse(response);\n  },\n  getClaimedOffers: async userId => {\n    const response = await fetch(`${API_BASE_URL}/offers/claimed?userId=${userId}`);\n    return handleResponse(response);\n  },\n  claimOffer: async (userId, offerId) => {\n    const response = await fetch(`${API_BASE_URL}/offers/claim`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId,\n        offerId\n      })\n    });\n    return handleResponse(response);\n  }\n};","map":{"version":3,"names":["API_BASE_URL","handleResponse","response","ok","error","json","Error","api","login","email","password","fetch","method","headers","body","JSON","stringify","signup","userData","getCards","bank","type","params","URLSearchParams","append","addUserCards","userId","cardIds","getUserCards","searchOffers","merchant","getClaimedOffers","claimOffer","offerId"],"sources":["/Users/nikharvdomadiya/Downloads/untitled folder/PayPerks/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8080';\n\nconst handleResponse = async (response) => {\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Something went wrong');\n  }\n  return response.json();\n};\n\nexport const api = {\n  // Auth endpoints\n  login: async (email, password) => {\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password }),\n    });\n    return handleResponse(response);\n  },\n\n  signup: async (userData) => {\n    const response = await fetch(`${API_BASE_URL}/auth/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(userData),\n    });\n    return handleResponse(response);\n  },\n\n  // Card endpoints\n  getCards: async (bank, type) => {\n    const params = new URLSearchParams();\n    if (bank) params.append('bank', bank);\n    if (type) params.append('type', type);\n    \n    const response = await fetch(`${API_BASE_URL}/cards-data?${params}`);\n    return handleResponse(response);\n  },\n\n  addUserCards: async (userId, cardIds) => {\n    const response = await fetch(`${API_BASE_URL}/user-cards`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ userId, cardIds }),\n    });\n    return handleResponse(response);\n  },\n\n  getUserCards: async (userId) => {\n    const response = await fetch(`${API_BASE_URL}/user-cards/${userId}`);\n    return handleResponse(response);\n  },\n\n  // Offer endpoints\n  searchOffers: async (userId, merchant) => {\n    const params = new URLSearchParams({ userId });\n    if (merchant) params.append('merchant', merchant);\n    \n    const response = await fetch(`${API_BASE_URL}/offers/search?${params}`);\n    return handleResponse(response);\n  },\n\n  getClaimedOffers: async (userId) => {\n    const response = await fetch(`${API_BASE_URL}/offers/claimed?userId=${userId}`);\n    return handleResponse(response);\n  },\n\n  claimOffer: async (userId, offerId) => {\n    const response = await fetch(`${API_BASE_URL}/offers/claim`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ userId, offerId }),\n    });\n    return handleResponse(response);\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}