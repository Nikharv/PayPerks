{"ast":null,"code":"var _jsxFileName = \"/Users/nikharvdomadiya/Downloads/untitled folder/PayPerks/frontend/src/pages/SetupPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '../css/SetupPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SetupPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [cards, setCards] = useState([{\n    bankName: '',\n    cardType: '',\n    cardName: ''\n  }]);\n  const [availableCardsMap, setAvailableCardsMap] = useState({});\n  const [errors, setErrors] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Get unique bank names from the database\n  const bankNames = ['Chase', 'Bank of America', 'American Express', 'Citi', 'Capital One', 'Wells Fargo', 'Discover', 'TD Bank', 'U.S. Bank', 'PNC', 'HSBC', 'Barclays', 'Ally Bank', 'Synchrony'];\n  const cardTypes = ['credit', 'debit'];\n\n  // Fetch available cards for a specific index\n  const fetchAvailableCards = async (bankName, cardType, index) => {\n    if (!bankName || !cardType) {\n      setAvailableCardsMap(prev => ({\n        ...prev,\n        [index]: []\n      }));\n      return;\n    }\n    try {\n      console.log('Fetching cards for:', {\n        bankName,\n        cardType,\n        index\n      });\n      const url = `http://localhost:8080/cards-data?bank=${encodeURIComponent(bankName)}&type=${encodeURIComponent(cardType)}`;\n      console.log('Request URL:', url);\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Response status:', response.status);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch cards: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Fetched cards for index', index, ':', data);\n      if (Array.isArray(data)) {\n        setAvailableCardsMap(prev => ({\n          ...prev,\n          [index]: data\n        }));\n      } else {\n        console.error('Invalid response format:', data);\n        setAvailableCardsMap(prev => ({\n          ...prev,\n          [index]: []\n        }));\n      }\n    } catch (error) {\n      console.error('Error fetching cards:', error);\n      setAvailableCardsMap(prev => ({\n        ...prev,\n        [index]: []\n      }));\n    }\n  };\n  const handleInputChange = (index, field, value) => {\n    const newCards = [...cards];\n    newCards[index] = {\n      ...newCards[index],\n      [field]: value,\n      // Reset cardName when bank or type changes\n      ...(field !== 'cardName' && {\n        cardName: ''\n      })\n    };\n    setCards(newCards);\n    clearError(index);\n\n    // Fetch available cards when bank or type changes\n    if ((field === 'bankName' || field === 'cardType') && newCards[index].bankName && newCards[index].cardType) {\n      fetchAvailableCards(newCards[index].bankName, newCards[index].cardType, index);\n    }\n  };\n  const addCard = () => {\n    setCards([...cards, {\n      bankName: '',\n      cardType: '',\n      cardName: ''\n    }]);\n  };\n  const removeCard = index => {\n    if (cards.length > 1) {\n      const newCards = cards.filter((_, i) => i !== index);\n      setCards(newCards);\n\n      // Remove available cards for the removed index\n      setAvailableCardsMap(prev => {\n        const newMap = {\n          ...prev\n        };\n        delete newMap[index];\n        // Reindex the remaining cards\n        Object.keys(newMap).filter(key => parseInt(key) > index).forEach(key => {\n          newMap[parseInt(key) - 1] = newMap[key];\n          delete newMap[key];\n        });\n        return newMap;\n      });\n      clearError(index);\n    }\n  };\n  const clearError = index => {\n    const newErrors = [...errors];\n    newErrors[index] = null;\n    setErrors(newErrors);\n  };\n  const validateForm = () => {\n    const newErrors = cards.map(card => {\n      if (!card.bankName) return 'Please select a bank';\n      if (!card.cardType) return 'Please select a card type';\n      if (!card.cardName) return 'Please select a card';\n      return null;\n    });\n    setErrors(newErrors);\n    return !newErrors.some(error => error !== null);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!validateForm()) return;\n    setIsLoading(true);\n    try {\n      // Find cardIds for each selected card\n      const cardsWithIds = cards.map((card, index) => {\n        var _availableCardsMap$in;\n        const matchingCard = (_availableCardsMap$in = availableCardsMap[index]) === null || _availableCardsMap$in === void 0 ? void 0 : _availableCardsMap$in.find(ac => ac.cardName === card.cardName);\n        if (!matchingCard) {\n          throw new Error(`Could not find card ID for ${card.cardName}`);\n        }\n        return {\n          cardId: matchingCard.cardId,\n          bankName: card.bankName,\n          cardType: card.cardType,\n          cardName: card.cardName\n        };\n      });\n      const response = await fetch('http://localhost:8080/cards/setup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          cards: cardsWithIds\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`Failed to save cards: ${errorData}`);\n      }\n\n      // Handle successful submission\n      console.log('Cards saved successfully');\n      // Navigate to dashboard\n      navigate('/dashboard');\n    } catch (error) {\n      console.error('Error saving cards:', error);\n      setErrors(['Failed to save cards: ' + error.message]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"setup-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"setup-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to PayPerks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"setup-subtitle\",\n        children: \"Let's add your cards to get started\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"setup-form\",\n        children: [cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-entry\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Card \", index + 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 17\n            }, this), cards.length > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"remove-card-btn\",\n              onClick: () => removeCard(index),\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: `bank-${index}`,\n              children: \"Bank Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: `bank-${index}`,\n              value: card.bankName,\n              onChange: e => handleInputChange(index, 'bankName', e.target.value),\n              className: errors[index] && !card.bankName ? 'error' : '',\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Bank\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 19\n              }, this), bankNames.map(bank => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: bank,\n                children: bank\n              }, bank, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: `type-${index}`,\n              children: \"Card Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: `type-${index}`,\n              value: card.cardType,\n              onChange: e => handleInputChange(index, 'cardType', e.target.value),\n              className: errors[index] && !card.cardType ? 'error' : '',\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 19\n              }, this), cardTypes.map(type => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: type,\n                children: type.charAt(0).toUpperCase() + type.slice(1)\n              }, type, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: `card-${index}`,\n              children: \"Card Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: `card-${index}`,\n              value: card.cardName,\n              onChange: e => handleInputChange(index, 'cardName', e.target.value),\n              className: errors[index] && !card.cardName ? 'error' : '',\n              disabled: !card.bankName || !card.cardType,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Card\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 19\n              }, this), [...new Map((availableCardsMap[index] || []).map(card => [card.cardName, card])).values()].map(availableCard => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: availableCard.cardName,\n                children: availableCard.cardName\n              }, availableCard.cardId, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this), errors[index] && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"error-message\",\n            children: errors[index]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"add-card-btn\",\n          onClick: addCard,\n          children: \"+ Add Another Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-btn\",\n          disabled: isLoading,\n          children: isLoading ? 'Saving...' : 'Finish Setup'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n};\n_s(SetupPage, \"h6z69019kLK30xQD5qFHO6lk/8s=\", false, function () {\n  return [useNavigate];\n});\n_c = SetupPage;\nexport default SetupPage;\nvar _c;\n$RefreshReg$(_c, \"SetupPage\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","SetupPage","_s","navigate","cards","setCards","bankName","cardType","cardName","availableCardsMap","setAvailableCardsMap","errors","setErrors","isLoading","setIsLoading","bankNames","cardTypes","fetchAvailableCards","index","prev","console","log","url","encodeURIComponent","response","fetch","method","headers","status","ok","Error","data","json","Array","isArray","error","handleInputChange","field","value","newCards","clearError","addCard","removeCard","length","filter","_","i","newMap","Object","keys","key","parseInt","forEach","newErrors","validateForm","map","card","some","handleSubmit","e","preventDefault","cardsWithIds","_availableCardsMap$in","matchingCard","find","ac","cardId","body","JSON","stringify","errorData","text","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onClick","htmlFor","id","onChange","target","bank","charAt","toUpperCase","slice","disabled","Map","values","availableCard","_c","$RefreshReg$"],"sources":["/Users/nikharvdomadiya/Downloads/untitled folder/PayPerks/frontend/src/pages/SetupPage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '../css/SetupPage.css';\n\nconst SetupPage = () => {\n  const navigate = useNavigate();\n  const [cards, setCards] = useState([{ bankName: '', cardType: '', cardName: '' }]);\n  const [availableCardsMap, setAvailableCardsMap] = useState({});\n  const [errors, setErrors] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Get unique bank names from the database\n  const bankNames = [\n    'Chase', 'Bank of America', 'American Express', 'Citi',\n    'Capital One', 'Wells Fargo', 'Discover', 'TD Bank',\n    'U.S. Bank', 'PNC', 'HSBC', 'Barclays', 'Ally Bank', 'Synchrony'\n  ];\n\n  const cardTypes = ['credit', 'debit'];\n\n  // Fetch available cards for a specific index\n  const fetchAvailableCards = async (bankName, cardType, index) => {\n    if (!bankName || !cardType) {\n      setAvailableCardsMap(prev => ({\n        ...prev,\n        [index]: []\n      }));\n      return;\n    }\n    \n    try {\n      console.log('Fetching cards for:', { bankName, cardType, index });\n      const url = `http://localhost:8080/cards-data?bank=${encodeURIComponent(bankName)}&type=${encodeURIComponent(cardType)}`;\n      console.log('Request URL:', url);\n      \n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      console.log('Response status:', response.status);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to fetch cards: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Fetched cards for index', index, ':', data);\n      \n      if (Array.isArray(data)) {\n        setAvailableCardsMap(prev => ({\n          ...prev,\n          [index]: data\n        }));\n      } else {\n        console.error('Invalid response format:', data);\n        setAvailableCardsMap(prev => ({\n          ...prev,\n          [index]: []\n        }));\n      }\n    } catch (error) {\n      console.error('Error fetching cards:', error);\n      setAvailableCardsMap(prev => ({\n        ...prev,\n        [index]: []\n      }));\n    }\n  };\n\n  const handleInputChange = (index, field, value) => {\n    const newCards = [...cards];\n    newCards[index] = {\n      ...newCards[index],\n      [field]: value,\n      // Reset cardName when bank or type changes\n      ...(field !== 'cardName' && { cardName: '' })\n    };\n    setCards(newCards);\n    clearError(index);\n\n    // Fetch available cards when bank or type changes\n    if ((field === 'bankName' || field === 'cardType') && newCards[index].bankName && newCards[index].cardType) {\n      fetchAvailableCards(newCards[index].bankName, newCards[index].cardType, index);\n    }\n  };\n\n  const addCard = () => {\n    setCards([...cards, { bankName: '', cardType: '', cardName: '' }]);\n  };\n\n  const removeCard = (index) => {\n    if (cards.length > 1) {\n      const newCards = cards.filter((_, i) => i !== index);\n      setCards(newCards);\n      \n      // Remove available cards for the removed index\n      setAvailableCardsMap(prev => {\n        const newMap = { ...prev };\n        delete newMap[index];\n        // Reindex the remaining cards\n        Object.keys(newMap)\n          .filter(key => parseInt(key) > index)\n          .forEach(key => {\n            newMap[parseInt(key) - 1] = newMap[key];\n            delete newMap[key];\n          });\n        return newMap;\n      });\n      \n      clearError(index);\n    }\n  };\n\n  const clearError = (index) => {\n    const newErrors = [...errors];\n    newErrors[index] = null;\n    setErrors(newErrors);\n  };\n\n  const validateForm = () => {\n    const newErrors = cards.map(card => {\n      if (!card.bankName) return 'Please select a bank';\n      if (!card.cardType) return 'Please select a card type';\n      if (!card.cardName) return 'Please select a card';\n      return null;\n    });\n\n    setErrors(newErrors);\n    return !newErrors.some(error => error !== null);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!validateForm()) return;\n\n    setIsLoading(true);\n    try {\n      // Find cardIds for each selected card\n      const cardsWithIds = cards.map((card, index) => {\n        const matchingCard = availableCardsMap[index]?.find(ac => ac.cardName === card.cardName);\n        if (!matchingCard) {\n          throw new Error(`Could not find card ID for ${card.cardName}`);\n        }\n        return {\n          cardId: matchingCard.cardId,\n          bankName: card.bankName,\n          cardType: card.cardType,\n          cardName: card.cardName\n        };\n      });\n\n      const response = await fetch('http://localhost:8080/cards/setup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          cards: cardsWithIds\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`Failed to save cards: ${errorData}`);\n      }\n\n      // Handle successful submission\n      console.log('Cards saved successfully');\n      // Navigate to dashboard\n      navigate('/dashboard');\n    } catch (error) {\n      console.error('Error saving cards:', error);\n      setErrors(['Failed to save cards: ' + error.message]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"setup-container\">\n      <div className=\"setup-content\">\n        <h1>Welcome to PayPerks</h1>\n        <p className=\"setup-subtitle\">Let's add your cards to get started</p>\n\n        <form onSubmit={handleSubmit} className=\"setup-form\">\n          {cards.map((card, index) => (\n            <div key={index} className=\"card-entry\">\n              <div className=\"card-header\">\n                <h3>Card {index + 1}</h3>\n                {cards.length > 1 && (\n                  <button\n                    type=\"button\"\n                    className=\"remove-card-btn\"\n                    onClick={() => removeCard(index)}\n                  >\n                    Remove\n                  </button>\n                )}\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor={`bank-${index}`}>Bank Name</label>\n                <select\n                  id={`bank-${index}`}\n                  value={card.bankName}\n                  onChange={(e) => handleInputChange(index, 'bankName', e.target.value)}\n                  className={errors[index] && !card.bankName ? 'error' : ''}\n                >\n                  <option value=\"\">Select Bank</option>\n                  {bankNames.map(bank => (\n                    <option key={bank} value={bank}>{bank}</option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor={`type-${index}`}>Card Type</label>\n                <select\n                  id={`type-${index}`}\n                  value={card.cardType}\n                  onChange={(e) => handleInputChange(index, 'cardType', e.target.value)}\n                  className={errors[index] && !card.cardType ? 'error' : ''}\n                >\n                  <option value=\"\">Select Type</option>\n                  {cardTypes.map(type => (\n                    <option key={type} value={type}>\n                      {type.charAt(0).toUpperCase() + type.slice(1)}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor={`card-${index}`}>Card Name</label>\n                <select\n                  id={`card-${index}`}\n                  value={card.cardName}\n                  onChange={(e) => handleInputChange(index, 'cardName', e.target.value)}\n                  className={errors[index] && !card.cardName ? 'error' : ''}\n                  disabled={!card.bankName || !card.cardType}\n                >\n                  <option value=\"\">Select Card</option>\n                  {[...new Map((availableCardsMap[index] || []).map(card => [card.cardName, card])).values()].map(availableCard => (\n                    <option key={availableCard.cardId} value={availableCard.cardName}>\n                      {availableCard.cardName}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              {errors[index] && (\n                <span className=\"error-message\">{errors[index]}</span>\n              )}\n            </div>\n          ))}\n\n          <button\n            type=\"button\"\n            className=\"add-card-btn\"\n            onClick={addCard}\n          >\n            + Add Another Card\n          </button>\n\n          <button\n            type=\"submit\"\n            className=\"submit-btn\"\n            disabled={isLoading}\n          >\n            {isLoading ? 'Saving...' : 'Finish Setup'}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default SetupPage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}